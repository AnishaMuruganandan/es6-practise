Every object has prototype property.
Inheritance in js is possible because of this.

Using function constructor if we create objects, It will create copies for each object. It is just wastage of memory.

If we use prototype, it will not copies, but just share the property and methods of the object with others

prototype chain:
When we fetch a property or method from a object, it will display if it is present, else it will search from the prototype shared
from parent, and the chain goes on till it find the value.
e.g:
Because of this prototype chain, we are able to use the "hasownproperty" methods in all objects, because it is present in the object
prototype(parent of all objects).

We can create function and variable in prototype by two methods,
1. constructor method and assign prototype
person.prototype.functionName = function(){
};

person.prototype.varName='';

2. object.create(prototypeName)

Because of this object.create method, we can specify, which prototype an object should use.

var newobj = object.create(prototype)

we can create the object with this method by specifying it as second property
var newobj = object.create(prototype, {
name : {value:'ad'}
})
